apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "base.resource.name" . }}-configmap
  {{- template "metadata.namespace" . }}
data:
    AUTHORITY: http://{{ include "base.resource.name" . }}:{{ .Values.service.port }}
    CLUSTER_DISCOVERY: kubernetes
    {{- template "config.secret.keys" . }}
    {{ template "cors.config" . }}
    {{ template "forwarded.config" . }}
    CORS_ADDITIONAL_HEADERS_LIST: '{{ .Values.global.customHttpHeaders }}'
    COUNTER: '{{ .Values.global.counter }}'
    ENABLE_OAUTH: 'true'
{{- if or .Values.global.enableOtivCustomizedTruststore .Values.global.otivSecretProviderClassCerts.enabled }}
    IV_TRUSTSTORE_PATH: /opt/certs/cacerts
{{- end }}
{{- if .Values.global.ipv6Enabled }}
    ENABLE_IPV6: 'true'
{{- end }}    
    EVENT_LOOP_POOL_SIZE: '6'
    LOG_OUT: {{ default .Values.global.logOutput .Values.logOutput }}
{{- if .Values.loglevel.hazelCast }}
    LOG_LEVEL_HAZELCAST: {{ .Values.loglevel.hazelCast }}
{{- end }}
{{- if .Values.loglevel.migrator }}
    LOG_LEVEL_MIGRATOR: {{ .Values.loglevel.migrator }}
{{- end }}
{{- if .Values.loglevel.netty }}
    LOG_LEVEL_NETTY: {{ .Values.loglevel.netty }}
{{- end }}
{{- if .Values.loglevel.service }}
    LOG_LEVEL_SERVICE: {{ .Values.loglevel.service }}
{{- end }}
{{- if .Values.loglevel.spi }}
    LOG_LEVEL_SPI: {{ .Values.loglevel.spi }}
{{- end }}
{{- if .Values.loglevel.spiSoteria }}
    LOG_LEVEL_SPI_SOTERIA: {{ .Values.loglevel.spiSoteria }}
{{- end }}
{{- if .Values.loglevel.spiPithos }}
    LOG_LEVEL_SPI_PITHOS: {{ .Values.loglevel.spiPithos }}
{{- end }}
{{- if .Values.loglevel.system }}
    LOG_LEVEL_SYSTEM: {{ .Values.loglevel.system }}
{{- end }}
{{- if .Values.loglevel.util }}
    LOG_LEVEL_UTIL: {{ .Values.loglevel.util }}
{{- end }}
{{- if .Values.loglevel.vertx }}
    LOG_LEVEL_VERTX: {{ .Values.loglevel.vertx }}
{{- end }}
    DISCOVERY_REGISTER_POLICY: name
    DISCOVERY_REGISTER_POLICY_NAME: {{ include "base.resource.name" . }}
    {{- template "new.relic.transform.config" . }}
    PEER_REST_PORT: '{{ .Values.service.port }}'
    PORT: '{{ .Values.service.targetPort }}'
    PITHOS_PROVIDER: {{ .Values.global.database.type }}
    PITHOS_HOST: {{ .Values.global.database.hostname }}
    PITHOS_PORT: '{{ .Values.global.database.port }}'
    PITHOS_DB: {{ eq .Values.global.database.type "oracle" | ternary .Values.global.database.adminDatabase .Values.global.database.ivName }}
{{- if (include "is.iv" .) }}
    DB_ADMIN_USER: {{ .Values.global.database.adminUsername }}
    PITHOS_USER: {{ eq .Values.global.database.type "oracle" | ternary .Values.global.database.adminUsername .Values.global.database.ivUsername }}
    PITHOS_ADMIN_DB: {{ .Values.global.database.adminDatabase }}
{{- end }}
    PITHOS_USE_SSL: '{{ .Values.global.database.ssl }}'
    PITHOS_SSL_MODE: '{{ .Values.global.database.sslMode }}'
{{- if .Values.global.database.oracleConnectOptions }}
    PITHOS_ORACLE_CONNECT_OPTIONS: '{{ .Values.global.database.oracleConnectOptions }}'
{{- end }}
    SOTERIA_PROVIDER: otds
    PITHOS_KEYSTORE_TYPE: 'JKS'
{{- if and .Values.global.database.ssl (not .Values.global.enableOtivCustomizedTruststore) (not .Values.global.otivSecretProviderClassCerts.enabled) }}
    PITHOS_KEYSTORE_PATH: /opt/jre/lib/security/cacerts
    PITHOS_TRUSTSTORE_PATH: /opt/jre/lib/security/cacerts
{{- end }}
{{- if and .Values.global.database.ssl (or .Values.global.enableOtivCustomizedTruststore .Values.global.otivSecretProviderClassCerts.enabled) }}
    PITHOS_KEYSTORE_PATH: /opt/certs/cacerts
    PITHOS_TRUSTSTORE_PATH: /opt/certs/cacerts
{{- end }}
    {{- template "timezone" . }}
    VERTX_CLUSTER_NETWORK_PORT: '{{ .Values.global.hazelport }}'
    __VERSION__: '{{ template "version.stamp" . }}'
