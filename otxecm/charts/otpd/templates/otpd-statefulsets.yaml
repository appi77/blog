########################################################################
# OpenText PowerDocs Kubernetes Stateful Sets
########################################################################
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/component: {{ .Chart.Name }}
    {{- include (printf "%s%s" .Chart.Name ".labels" ) . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ .Values.serviceName }}
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      securityContext:
        ## The fsGroup field specifies that group ID {{ .Values.fsGroup }} is associated
        ## with all Containers in the Pod. Group ID {{ .Values.fsGroup }} is also
        ## associated with the mounted volumes and with any files created
        ## in that volume.
        ## This will make volumes be mounted with {{ .Values.fsGroup }} group permissions.
        fsGroup: {{ .Values.fsGroup }}
      ## serviceAccountName defines the name of the service account the
      ## pods are running under. Normally that is 'default'
      serviceAccountName: {{ default .Values.global.serviceAccountName .Values.serviceAccountName }}
      volumes:
        - name: {{ .Chart.Name }}-certs-volume
          secret:
            secretName: {{ .Chart.Name }}-certs      
      containers:
      - name: {{ .Chart.Name }}
{{- if not (regexFind "\\/$" (default .Values.global.imageSource .Values.image.source) ) }}
        image: {{ (default .Values.global.imageSource .Values.image.source) }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
{{- else }}
        image: {{ (default .Values.global.imageSource .Values.image.source) }}{{ .Values.image.name }}:{{ .Values.image.tag }}
{{- end }}
{{- if eq .Values.readinessProbe.enabled true }}
        readinessProbe:
            exec:
              command:
                - "/opt/opentext/scripts/bash/check_otpd_readiness.sh"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
{{- end }}
{{- if eq .Values.livenessProbe.enabled true }}
        livenessProbe:
            exec:
              command:
                - "/opt/opentext/scripts/bash/check_otpd_liveness.sh"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
{{- end }}
{{- if (default .Values.global.resourceRequirements .Values.resources.enabled )}}
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
{{- end }}
        ports:
        - containerPort: {{ .Values.targetPort }}
        volumeMounts:
{{- range .Values.volumes }}
        - mountPath: {{ .mountPath }}
          name: {{ $.Chart.Name }}-{{ .name }}
{{- end }}
{{- if and (eq .Values.importCustomRootCA true) (eq .Values.sslEnabledDB true) }}
        - mountPath: /opt/opentext/config/certs
          name: {{ .Chart.Name }}-certs-volume
{{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Chart.Name }}-configmap
        imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.image.pullPolicy }}
{{- if eq (default .Values.global.secretlink.enabled .Values.secretlink.enabled) true }}
      - name: {{ .Chart.Name }}-secretlink
{{- if not (regexFind "\\/$" (default .Values.global.imageSource .Values.global.secretlink.image.source) ) }}
        image: {{ (default .Values.global.imageSource .Values.global.secretlink.image.source) }}/{{ .Values.global.secretlink.image.name }}:{{ .Values.global.secretlink.image.tag }}
{{- else }}
        image: {{ (default .Values.global.imageSource .Values.global.secretlink.image.source) }}{{ .Values.global.secretlink.image.name }}:{{ .Values.global.secretlink.image.tag }}
{{- end }}
        ports:
        - containerPort: {{ .Values.secretlink.port }}
        resources:
          limits:
            cpu: {{ .Values.secretlink.resources.limits.cpu }}
            memory: {{ .Values.secretlink.resources.limits.memory }}
          requests:
            cpu: {{ .Values.secretlink.resources.requests.cpu }}
            memory: {{ .Values.secretlink.resources.requests.memory }}
        envFrom:
        - configMapRef:
            name: {{ .Chart.Name }}-secretlink-configmap
        imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.secretlink.image.pullPolicy }}
{{- end }}
      hostname: {{ .Values.hostname }}
{{- if (default .Values.global.imagePullSecret .Values.image.pullSecret) }}
      imagePullSecrets:
      - name: {{ default .Values.global.imagePullSecret .Values.image.pullSecret }}
{{- end }}
  volumeClaimTemplates:
{{- range .Values.volumes }}
  - metadata:
      name: {{ $.Chart.Name }}-{{ .name }}
{{- $pvcName := .name | toString }}
{{- range $key,$value := $.Values.pvc.labels }}
{{- $key := $key | toString }}
{{- if eq $key $pvcName }}
{{- if $value }}
      labels: 
{{- toYaml $value | nindent 8 }}      
{{- end }}
{{- end }}
{{- end }}           
    spec:
      accessModes:
      - {{ .accessMode | default "ReadWriteOnce" }}
{{- if (default $.Values.global.storageClassName $.Values.resources.storageClassName) }}
      storageClassName: {{ (default $.Values.global.storageClassName $.Values.resources.storageClassName) | quote }}
{{- end }}
      resources:
        requests:
          storage: {{ .storage }}
{{- end }}
---
